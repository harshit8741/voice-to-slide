// PowerPoint export service using PptxGenJS

import PptxGenJS from 'pptxgenjs';
import { PresentationExport, ExportSlide, ThemeConfig } from '../types/export';
import { ExportTransformer } from '../utils/exportTransformer';

export class PptxExportService {
  /**
   * Generate PPTX buffer from export data
   */
  static async generatePptxBuffer(exportData: PresentationExport): Promise<Buffer> {
    try {
      // Validate export data
      if (!ExportTransformer.validateExportData(exportData)) {
        throw new Error('Invalid export data structure');
      }

      console.log('Creating PPTX with', exportData.slides.length, 'slides');
      const pptx = new PptxGenJS();

      // Configure presentation metadata
      pptx.author = exportData.metadata.author;
      pptx.title = exportData.metadata.title;
      pptx.subject = 'Generated by OnEd';
      pptx.company = 'OnEd Platform';

      // Apply theme
      this.applyTheme(pptx, exportData.theme);

      // Generate slides
      for (const slideData of exportData.slides) {
        console.log('Creating slide:', slideData.slideNumber, slideData.title.text);
        this.createSlide(pptx, slideData, exportData.theme);
      }

      // Generate and return buffer
      console.log('Writing PPTX file...');
      const buffer = await pptx.write({ outputType: 'arraybuffer' }) as ArrayBuffer;
      console.log('PPTX generated successfully, buffer size:', buffer.byteLength);
      return Buffer.from(buffer);

    } catch (error) {
      console.error('Error in generatePptxBuffer:', error);
      throw new Error(`Failed to generate PowerPoint file: ${(error as Error).message}`);
    }
  }

  /**
   * Apply theme configuration to presentation
   */
  private static applyTheme(pptx: PptxGenJS, theme: ThemeConfig): void {
    try {
      // Set theme fonts
      pptx.theme = {
        headFontFace: theme.primaryFont,
        bodyFontFace: theme.secondaryFont || theme.primaryFont
      };
      console.log('Theme applied:', theme.name);
    } catch (error) {
      console.warn('Could not apply theme:', error);
    }
  }

  /**
   * Create individual slide
   */
  private static createSlide(
    pptx: PptxGenJS, 
    slideData: ExportSlide, 
    theme: ThemeConfig
  ): void {
    try {
      const slide = pptx.addSlide();

      // Set background
      if (theme.background && theme.background !== '#FFFFFF') {
        slide.background = { color: theme.background };
      }

      if (slideData.type === 'title') {
        this.createTitleSlide(slide, slideData, theme);
      } else {
        this.createContentSlide(slide, slideData, theme);
      }
    } catch (error) {
      console.error('Error creating slide:', slideData.slideNumber, error);
      throw error;
    }
  }

  /**
   * Create title slide layout
   */
  private static createTitleSlide(
    slide: any,
    slideData: ExportSlide,
    theme: ThemeConfig
  ): void {
    try {
      // Main title
      slide.addText(slideData.title.text, {
        x: 1,
        y: 2.5,
        w: 8,
        h: 2,
        fontSize: slideData.title.fontSize || 36,
        color: theme.titleColor,
        bold: true,
        align: 'center',
        fontFace: theme.primaryFont
      });

      // Subtitle
      slide.addText('Generated by OnEd Platform', {
        x: 1,
        y: 5,
        w: 8,
        h: 0.5,
        fontSize: 16,
        color: theme.textColor,
        align: 'center',
        fontFace: theme.primaryFont
      });

      // Creation date
      slide.addText(`Created: ${new Date().toLocaleDateString()}`, {
        x: 1,
        y: 6,
        w: 8,
        h: 0.4,
        fontSize: 12,
        color: theme.textColor,
        align: 'center',
        fontFace: theme.primaryFont
      });
    } catch (error) {
      console.error('Error creating title slide:', error);
      throw error;
    }
  }

  /**
   * Create content slide layout
   */
  private static createContentSlide(
    slide: any,
    slideData: ExportSlide,
    theme: ThemeConfig
  ): void {
    try {
      // Slide title
      slide.addText(slideData.title.text, {
        x: 0.5,
        y: 0.5,
        w: 9,
        h: 1,
        fontSize: slideData.title.fontSize || 28,
        color: theme.titleColor,
        bold: true,
        align: 'left',
        fontFace: theme.primaryFont
      });

      // Content area with bullet points
      if (slideData.content.bulletPoints.length > 0) {
        // Add each bullet point individually
        slideData.content.bulletPoints.forEach((bulletPoint, index) => {
          slide.addText(bulletPoint.text, {
            x: 0.8,
            y: 2.0 + (index * 0.6),
            w: 8.5,
            h: 0.5,
            fontSize: slideData.content.fontSize || 18,
            color: theme.textColor,
            fontFace: theme.primaryFont
          });
          
          // Add bullet point manually
          slide.addText('â€¢', {
            x: 0.5,
            y: 2.0 + (index * 0.6),
            w: 0.3,
            h: 0.5,
            fontSize: slideData.content.fontSize || 18,
            color: theme.accentColor,
            fontFace: theme.primaryFont,
            bold: true
          });
        });
      }

      // Add slide number
      slide.addText(`${slideData.slideNumber}`, {
        x: 9,
        y: 7,
        w: 0.5,
        h: 0.3,
        fontSize: 10,
        color: theme.textColor,
        align: 'right',
        fontFace: theme.primaryFont
      });
    } catch (error) {
      console.error('Error creating content slide:', error);
      throw error;
    }
  }

  /**
   * Generate filename for download
   */
  static generateFilename(title: string): string {
    // Sanitize title for filename
    const sanitized = title
      .replace(/[^a-zA-Z0-9\s-_]/g, '') // Remove special characters
      .replace(/\s+/g, '_') // Replace spaces with underscores
      .toLowerCase()
      .substring(0, 50); // Limit length

    const timestamp = new Date().toISOString().split('T')[0]; // YYYY-MM-DD
    return `${sanitized}_${timestamp}.pptx`;
  }

  /**
   * Get MIME type for PPTX files
   */
  static getPptxMimeType(): string {
    return 'application/vnd.openxmlformats-officedocument.presentationml.presentation';
  }
}